/*
 * Danish Data Portal - HPC API
 *
 * A Web API for HPC centers to communicate with the Danish Data Portal to manage access and data transfers
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"time"
)

type Data map[string]any

type CreateMessage struct {
	msgType int
	value any
}

type CreateProject struct {
	projectNumber string
	accessIdentifier string
}

type FileForDelivery struct{
	deliveryId string
	projectNumber string
	fileId string
	fileSize string
	checkSum string
}

var messageCount int = 0

var confirmQueue []int

var messageQueue []CreateMessage

func updateMessageQueue(msg CreateMessage){
	messageQueue = append(messageQueue, msg)
	fmt.Println(messageQueue)
}

func generateCreateProject(projectNumber string) CreateMessage{
	return CreateMessage{0,projectNumber}
}

func generateDeleteProject(projectNumber string) CreateMessage{
	return CreateMessage{1,projectNumber}
}

func generateCreateProjectAccess(projectNumber string, accessIdentifier string) CreateMessage{
	return CreateMessage{2,CreateProject{projectNumber,accessIdentifier}}
}

func generateDeleteProjectAccess(accessIdentifier string) CreateMessage{
	return CreateMessage{3,accessIdentifier}
}

func generateDisableProjectAccess(accessIdentifier string) CreateMessage{
	return CreateMessage{4,accessIdentifier}
}

func generateEnableProjectAccess(accessIdentifier string) CreateMessage{
	return CreateMessage{5,accessIdentifier}
}

func generateResetPassword(accessIdentifier string) CreateMessage{
	return CreateMessage{6,accessIdentifier}
}

func generateDataDeliveryReady(deliveryId string,
	                       projectNumber string,
	                       fileId string,
                               fileSize string,
	                       checkSum string) CreateMessage{
	var fileData FileForDelivery =
		FileForDelivery{
		deliveryId,
		projectNumber,
		fileId,
		fileSize,
		checkSum}
	return CreateMessage{7,fileData}
}

func generateDeleteDataFile(fileId string) CreateMessage{
	return CreateMessage{8,fileId}
}

func generateReturnDataFile(fileId string) CreateMessage{
	return CreateMessage{9,fileId}
}

func generateMessage(msg CreateMessage) Data{
	now := time.Now()
	dataMap := make(map[string]any)
	confirmQueue = append(confirmQueue, messageCount)
	messageCount += 1
	var messageType HPCMessageTypeEnum
	switch msg.msgType{
		case 0:
		messageType = CREATE_PROJECT
		dataMap["ProjectNo"] = msg.value //Is 42 funnier?

		case 1:
		messageType = DELETE_PROJECT
		dataMap["ProjectNo"] = msg.value //Maybe 666?

		case 2:
		messageType = CREATE_PROJECT_ACCESS

		var value CreateProject = msg.value.(CreateProject)
		dataMap["ProjectNo"] = value.projectNumber
		dataMap["AccessIdentifier"] = value.accessIdentifier

		case 3:
		messageType = DELETE_PROJECT_ACCESS
		dataMap["AccessIdentifier"] = msg.value

		case 4:
		messageType = DISABLE_PROJECT_ACCESS
		dataMap["AccessIdentifier"] = msg.value

		case 5:
		messageType = ENABLE_PROJECT_ACCESS
		dataMap["AccessIdentifier"] = msg.value

		case 6:
		messageType = RESET_PASSWORD
		dataMap["AccessIdentifier"] = msg.value

		case 7:
		messageType = DATA_DELIVERY_READY
		var value FileForDelivery = msg.value.(FileForDelivery)

		dataMap["DataDeliveryId"] = value.deliveryId
		dataMap["ProjectNo"] = value.projectNumber

		var filesMap []map[string]string
		file := make(map[string]string)
		file["FileId"] = value.fileId
		file["FileSize"] = value.fileSize
		file["FileChecksum"] = value.checkSum
		filesMap =append(filesMap, file)

		dataMap["Files"] = filesMap

		case 8:
		messageType = DELETE_DATA_FILE
		dataMap["FileId"] = msg.value

		default:
		messageType = RETURN_DATA_FILE
		dataMap["FileId"] = msg.value

	}
	message := make(Data)
	message["messageId"] = (messageCount-1)
	message["messageType"] = messageType
	message["timestamp"] = now.String()
	message["data"] = dataMap
	return message
}

func generateMessages() []Data{
	var data []Data = []Data{}
	for _,msg := range messageQueue{
		data = append(data, generateMessage(msg))
	}
	messageQueue = []CreateMessage{}
	return data
}
