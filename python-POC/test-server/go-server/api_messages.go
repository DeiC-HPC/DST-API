/*
 * Danish Data Portal - HPC API
 *
 * A Web API for HPC centers to communicate with the Danish Data Portal to manage access and data transfers
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"encoding/json"
	"strconv"

	"github.com/gorilla/mux"
)

func getMessages() []Data{
	data := generateMessages()
	return data
}

func MessagesGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(getMessages())
}

func popMessageInQueue(id int) bool{
	//Look only for the first message in the confirmQueue
	if(confirmQueue != nil && confirmQueue[0].queue == id){
		nextMessage := confirmQueue[0].nextMessage
		//If value is nil then the message is not instantiated and we are done in this round
		if(nextMessage.value != nil){
			updateMessageQueue(nextMessage)
		}
		confirmQueue = confirmQueue[1:]
		messageQueue = messageQueue[1:]
		return true
	} else {
		return false
	}
}

func MessagesIdPatch(w http.ResponseWriter, r *http.Request) {
	messageIdString := mux.Vars(r)["id"]
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	messageId, err := strconv.Atoi(messageIdString)
	if err != nil {
		fmt.Println("Error converting the following messageId to an integer: ", err)
	}
	if(popMessageInQueue(messageId)){
		w.WriteHeader(http.StatusOK)
	} else {
		w.WriteHeader(http.StatusNotFound)
	}
}

func MessagesPatch(w http.ResponseWriter, r *http.Request) {
	var messageList []int
	err := json.NewDecoder(r.Body).Decode(&messageList)
	if err != nil {
		fmt.Println(err)
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusBadRequest)
		w.WriteHeader(http.StatusNotImplemented)
		return
	}
	fmt.Println(messageList)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotImplemented)
}
