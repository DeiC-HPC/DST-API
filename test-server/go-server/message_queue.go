/*
 * Danish Data Portal - HPC API
 *
 * A Web API for HPC centers to communicate with the Danish Data Portal to manage access and data transfers
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"time"
	"strconv"
)

type Data map[string]any

type QueueAndNextMessage struct {
	queue int
	nextMessage CreateMessage
}

type CreateMessage struct {
	msgType int
	value any

	//These two are Needed for continous message generation
	projectNumber string
	accessIdentifier string
}

type FileForDelivery struct{
	deliveryId string
	projectNumber string
	fileId string
	fileSize string
	checkSum string
}

var messageCount int = 0

var confirmQueue []QueueAndNextMessage

var newMessageQueue []CreateMessage

var messageQueue []Data = []Data{}

func updateMessageQueue(msg CreateMessage){
	newMessageQueue = append(newMessageQueue, msg)
}

func generateCreateProject(projectNumber string) CreateMessage{
	return CreateMessage{0,projectNumber,projectNumber,""}
}

func generateDeleteProject(projectNumber string) CreateMessage{
	return CreateMessage{1,projectNumber,projectNumber,""}
}

func generateCreateProjectAccess(accessIdentifier string, projectNumber string) CreateMessage{
	return CreateMessage{2,accessIdentifier,projectNumber,accessIdentifier}
}

func generateDeleteProjectAccess(accessIdentifier string, projectNumber string) CreateMessage{
	return CreateMessage{3,accessIdentifier,projectNumber,accessIdentifier}
}

func generateDisableProjectAccess(accessIdentifier string, projectNumber string) CreateMessage{
	return CreateMessage{4,accessIdentifier,projectNumber,accessIdentifier}
}

func generateEnableProjectAccess(accessIdentifier string, projectNumber string) CreateMessage{
	return CreateMessage{5,accessIdentifier,projectNumber,accessIdentifier}
}

func generateResetPassword(accessIdentifier string, projectNumber string) CreateMessage{
	return CreateMessage{6,accessIdentifier,projectNumber,accessIdentifier}
}

func generateDataDeliveryReady(deliveryId string,
	                       projectNumber string,
	                       fileId string,
	                       fileSize string,
	                       checkSum string,
	                       accessIdentifier string) CreateMessage{
	var fileData FileForDelivery =
		FileForDelivery{
		deliveryId,
		projectNumber,
		fileId,
		fileSize,
		checkSum}
	return CreateMessage{7,fileData,projectNumber,accessIdentifier}
}

func generateDeleteDataFile(fileId string, projectNumber string, accessIdentifier string) CreateMessage{
	return CreateMessage{8,fileId,projectNumber, accessIdentifier}
}

func generateReturnDataFile(fileId string, projectNumber string, accessIdentifier string) CreateMessage{
	return CreateMessage{9,fileId,projectNumber, accessIdentifier}
}

func generateMessage(msg CreateMessage) Data{
	now := time.Now()
	dataMap := make(map[string]any)
	var nextMessage CreateMessage
	var messageType HPCMessageTypeEnum
	switch msg.msgType{
		case 0:
		messageType = CREATE_PROJECT
		dataMap["projectNo"] = msg.value

		nextMessage = generateCreateProjectAccess("TestUser"+strconv.Itoa(messageCount), msg.value.(string))

		case 1:
		messageType = DELETE_PROJECT
		dataMap["projectNo"] = msg.value

		case 2:
		messageType = CREATE_PROJECT_ACCESS

		dataMap["projectNo"] = msg.projectNumber
		dataMap["accessIdentifier"] = msg.value

		nextMessage = generateDisableProjectAccess(msg.value.(string), msg.projectNumber)

		case 3:
		messageType = DELETE_PROJECT_ACCESS
		dataMap["accessIdentifier"] = msg.value

		nextMessage = generateDeleteProject(msg.projectNumber)

		case 4:
		messageType = DISABLE_PROJECT_ACCESS
		dataMap["accessIdentifier"] = msg.value

		nextMessage = generateEnableProjectAccess(msg.value.(string), msg.projectNumber)

		case 5:
		messageType = ENABLE_PROJECT_ACCESS
		dataMap["accessIdentifier"] = msg.value

		nextMessage = generateResetPassword(msg.value.(string), msg.projectNumber)

		case 6:
		messageType = RESET_PASSWORD
		dataMap["accessIdentifier"] = msg.value

		nextMessage = generateDataDeliveryReady("Test",msg.projectNumber,"TestFile"+msg.projectNumber,"1","0", msg.accessIdentifier)

		case 7:
		messageType = DATA_DELIVERY_READY
		var value FileForDelivery = msg.value.(FileForDelivery)

		dataMap["dataDeliveryId"] = value.deliveryId
		dataMap["projectNo"] = value.projectNumber

		var filesMap []map[string]string
		file := make(map[string]string)
		file["fileId"] = value.fileId
		addAvailableFile(value.fileId)
		file["fileSize"] = value.fileSize
		file["fileChecksum"] = value.checkSum
		filesMap =append(filesMap, file)

		dataMap["files"] = filesMap

		nextMessage = generateReturnDataFile(value.fileId, msg.projectNumber, msg.accessIdentifier)

		case 8:
		messageType = DELETE_DATA_FILE
		dataMap["fileId"] = msg.value

		nextMessage = generateDeleteProjectAccess(msg.accessIdentifier, msg.projectNumber)

		default:
		messageType = RETURN_DATA_FILE
		dataMap["fileId"] = msg.value

		nextMessage = generateDeleteDataFile(msg.value.(string), msg.projectNumber, msg.accessIdentifier)

	}
	message := make(Data)
	message["messageId"] = (messageCount)
	message["messageType"] = messageType
	message["timestamp"] = now.String()
	message["data"] = dataMap

	confirmQueue = append(confirmQueue, QueueAndNextMessage{messageCount,nextMessage})
	messageCount += 1
	return message
}

func generateMessages() []Data{
	var data []Data = []Data{}
	queue := newMessageQueue
	newMessageQueue = []CreateMessage{}
	for _,msg := range queue{
		data = append(data, generateMessage(msg))
	}
	messageQueue = append(messageQueue, data...)
	return messageQueue
}
